@page "/dashboard"
@using MudBlazor
@using Coursework.Models
@using Coursework.Services
@inject ITransactionService transactionService
@inject IUserService userService
@inject AuthenticationStateService authStateService
@inject IDebtService debtService


<style>
    /* Existing general styles for dashboard cards */
    .dashboard-card {
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 15px;
        margin-bottom: 10px;
    }

    .dashboard-header {
        display: flex;
        justify-content: space-between;
    }

    .chart-container {
        height: 300px;
    }

    .transaction-list {
        margin-top: 20px;
    }

    .row {
        margin-right: 0;
        margin-left: 0;
    }
    /* General styles for Top 5 and Bottom 5 Transactions (unchanged) */
    .transaction-header,
    .transaction-item {
        display: grid;
        grid-template-columns: repeat(5, 1fr); /* 5 columns for other transactions */
        justify-items: center;
        align-items: center;
        font-size: 0.9rem;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }

    .transaction-header {
        font-weight: bold;
        border-bottom: 2px solid #ccc;
        background-color: #f9f9f9;
    }

    .transaction-item {
        transition: background-color 0.3s;
    }

        .transaction-item:hover {
            background-color: #f1f1f1;
        }

    .clickable {
        cursor: pointer;
        user-select: none;
    }

        .clickable:hover {
            color: #6644FA;
        }

    .dashboard-card h5 {
        font-size: 1.2rem;
    }

    .dashboard-card h2 {
        font-size: 2rem;
        font-weight: bold;
    }

    .col-md-8, .col-md-4 {
        padding-right: 10px;
        padding-left: 10px;
    }

    .dashboard-card.bg-success {
        background-color: #28a745;
    }

    .dashboard-card.bg-danger {
        background-color: #dc3545;
    }

    .dashboard-card.bg-warning {
        background-color: #ffc107;
    }

    /* New styles specifically for Pending Debts section */
    .dashboard-card .pending-debt-list .transaction-header,
    .dashboard-card .pending-debt-list .transaction-item {
        display: grid;
        grid-template-columns: repeat(7, 1fr); /* 7 columns for Pending Debts */
        justify-items: center;
        align-items: center;
        font-size: 0.9rem;
        padding: 10px 0;
        border-bottom: 1px solid #eee;
    }

    .dashboard-card .pending-debt-list .transaction-header {
        font-weight: bold;
        border-bottom: 2px solid #ccc;
        background-color: #f9f9f9;
    }

    .dashboard-card .pending-debt-list .transaction-item {
        transition: background-color 0.3s;
    }

        .dashboard-card .pending-debt-list .transaction-item:hover {
            background-color: #f1f1f1;
        }

        .dashboard-card .pending-debt-list .transaction-header span,
        .dashboard-card .pending-debt-list .transaction-item span {
            text-align: center;
        }

        .dashboard-card .pending-debt-list .transaction-item span {
            word-wrap: break-word; /* Helps with long text like labels */
            padding: 5px 0;
        }

</style>

@if (authStateService.IsAuthenticated())
{
    <div class="container mt-4">
        <!-- Display username -->
        <h1>Welcome, @authStateService.GetAuthenticatedUser()?.UserName!</h1>

        <div class="row align-items-start">
    <!-- Left Column: Summary Cards -->
            <div class="col-md-8">
                <div class="row">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Available Balance</p>
                                <h5 class="card-title">@($"{authStateService.GetUserCurrency()}{availableBalance}")</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Total Inflows</p>
                                <h5 class="card-title">@($"{authStateService.GetUserCurrency()}{totalIncome}")</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Total Outflows</p>
                                <h5 class="card-title">@($"{authStateService.GetUserCurrency()}{totalExpense}")</h5>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="row mt-3">
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Remaining Debt</p>
                                <h5 class="card-title text-primary">@($"{authStateService.GetUserCurrency()}{remainingDebt}")</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Original Debt</p>
                                <h5 class="card-title text-secondary">@($"{authStateService.GetUserCurrency()}{originalDebt}")</h5>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4">
                        <div class="card">
                            <div class="card-body text-center">
                                <p class="text-muted">Cleared Debt</p>
                                <h5 class="card-title text-success">@($"{authStateService.GetUserCurrency()}{clearedDebt}")</h5>
                            </div>
                        </div>
                    </div>
                </div>
            </div>


    <!-- Right Column: Pie Chart -->
    <div class="col-md-4">
        <div class="dashboard-card">
            <h5>Financial Overview</h5>
            <div class="chart-container">
                <MudChart ChartType="ChartType.Pie"
                          Width="90%"
                          Height="200px"
                          InputData="@chartData"
                          InputLabels="@chartLabels"
                          ChartOptions="@options" />
            </div>
        </div>
    </div>
</div>

        <div class="row">
            <div class="col-md-12">
                <div class="dashboard-card">
                    <h5>Transactions</h5>

                    <!-- Filters Section -->
                    <div class="row mb-3 align-items-end filters-row">
                        <div class="col-md-3">
                            <label for="titleSearch">Search by Title:</label>
                            <input type="text" id="titleSearch" class="form-control filter-input" @bind="titleSearch" @bind:after="OnTitleSearchChanged" />
                        </div>
                        <div class="col-md-2">
                            <label for="fromDate">From:</label>
                            <input type="date" id="fromDate" class="form-control filter-input" @bind="fromDate" @bind:after="OnDateRangeChanged" />
                        </div>
                        <div class="col-md-2">
                            <label for="toDate">To:</label>
                            <input type="date" id="toDate" class="form-control filter-input" @bind="toDate" @bind:after="OnDateRangeChanged" />
                        </div>
                        <div class="col-md-2">
                            <label for="tagSearch">Search by Tag:</label>
                            <input type="text" id="tagSearch" class="form-control filter-input" @bind="tagFilter" @bind:after="OnFiltersChanged" />
                        </div>

                        <div class="col-md-2">
                            <label for="typeFilter">Type:</label>
                            <select id="typeFilter" class="form-control filter-input" @bind="typeFilter" @bind:after="OnFiltersChanged">
                                <option value="">All</option>
                                <option value="Income">Income</option>
                                <option value="Expense">Expense</option>
                                <option value="Debt">Debt</option>
                            </select>
                        </div>
                    </div>


                    <div class="row">
                        <div class="col-md-6">
                            <h6>Top 5 Transactions</h6>
                            <div class="transaction-list">
                                <div class="transaction-header">
                                    <span>Title</span>
                                    <span>Date</span>
                                    <span>Amount</span>
                                    <span>Type</span>
                                    <span>Tags</span>
                                </div>

                                @foreach (var transaction in TopTransactions)
                                {
                                    <div class="transaction-item">
                                        <span>@transaction.Description</span>
                                        <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                                        <span>@($"{authStateService.GetUserCurrency()}{transaction.Amount}")</span>
                                        <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                                        <span>@transaction.Tags</span>
                                    </div>

                                }
                            </div>
                        </div>

                        <div class="col-md-6">
                            <h6>Bottom 5 Transactions</h6>
                            <div class="transaction-list">
                                <div class="transaction-header">
                                    <span>Title</span>
                                    <span>Date</span>
                                    <span>Amount</span>
                                    <span>Type</span>
                                    <span>Tags</span>
                                </div>

                                @foreach (var transaction in BottomTransactions)
                                {
                                    <div class="transaction-item">
                                        <span>@transaction.Description</span>
                                        <span>@transaction.Date.ToString("yyyy-MM-dd")</span>
                                        <span>@($"{authStateService.GetUserCurrency()}{transaction.Amount}")</span>
                                        <span class="@(transaction.Type == "Income" ? "text-success" : "text-danger")">@transaction.Type</span>
                                        <span>@transaction.Tags</span>
                                    </div>

                                }
                            </div>
                        </div>
                    </div>

                    <div class="row">
                        <div class="col-md-12">
                            <div class="dashboard-card">
                                <h5>Pending Debts</h5>

                                <!-- Pending Debts Table -->
                                <div class="table-responsive">
                                    <table class="table table-striped table-bordered">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Description</th>
                                                <th>Total Amount</th>
                                                <th>Amount Paid</th>
                                                <th>Remaining</th>
                                                <th>Due Date</th>
                                                <th>Status</th>
                                                <th>Notes</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var debt in pendingDebts)
                                            {
                                                <tr>
                                                    <td>@debt.Description</td>
                                                    <td>@debt.Amount.ToString("C")</td>
                                                    <td class="text-success">@debt.AmountPaid.ToString("C")</td>
                                                    <td class="text-primary">@debt.RemainingAmount.ToString("C")</td>
                                                    <td>@(debt.DueDate?.ToShortDateString() ?? "Not set")</td>
                                                    <td>
                                                        @if (debt.AmountPaid == 0)
                                                        {
                                                            <span class="badge bg-warning text-dark">Pending</span>
                                                        }
                                                        else if (debt.RemainingAmount > 0)
                                                        {
                                                            <span class="badge bg-info text-dark">In Progress</span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-success">Paid</span>
                                                        }
                                                    </td>
                                                    <td>
                                                        @if (!string.IsNullOrEmpty(debt.Labels))
                                                        {
                                                            @debt.Labels
                                                        }
                                                        else
                                                        {
                                                            <span class="text-muted fst-italic">No notes</span>
                                                        }
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>

                                
                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
       


    </div>
}

@code {
    private decimal totalIncome;
    private decimal totalExpense;
    private decimal availableBalance;
    private decimal remainingDebt;
    private decimal originalDebt;
    private decimal clearedDebt;
    private List<string> tagOptions = new List<string> { "Fuel", "Rent", "Groceries", "Custom" };
    private string tagFilter = string.Empty;
    private string typeFilter = string.Empty;
    private DateTime? fromDate;
    private DateTime? toDate;
    private string titleSearch = string.Empty;




 
    private List<Debt> pendingDebts = new List<Debt>();

    protected override async Task OnInitializedAsync()
    {
        await UpdateFilteredTransactions();
        await CalculateTotals();
        await LoadPendingDebts();
    }

    private async Task LoadPendingDebts()
    {
        // Fetch the list of pending debts (you can modify this logic based on your data model)
        pendingDebts = (await debtService.GetPendingDebtsAsync()).ToList();
        StateHasChanged();
    }


    private IEnumerable<Transaction> TopTransactions => _filteredTransactions
        .OrderByDescending(t => Math.Abs(t.Amount))
        .Take(5)
        .Select(t => new Transaction
            {
                Description = t.Description,
                Date = t.Date,
                Amount = Math.Abs(t.Amount), // Convert to positive for display
                Type = t.Type,
                Tags = t.Tags
            });

    private IEnumerable<Transaction> BottomTransactions => _filteredTransactions
        .OrderBy(t => Math.Abs(t.Amount))
        .Take(5)
        .Select(t => new Transaction
            {
                Description = t.Description,
                Date = t.Date,
                Amount = Math.Abs(t.Amount), // Convert to positive for display
                Type = t.Type,
                Tags = t.Tags
            });


    private IEnumerable<Transaction> _filteredTransactions = new List<Transaction>();

    private async Task UpdateFilteredTransactions()
    {
        // Get all filtered transactions from the service
        _filteredTransactions = await transactionService.GetFilteredTransactions(fromDate, toDate, tagFilter, typeFilter);

        // Filter by title search if provided
        if (!string.IsNullOrEmpty(titleSearch))
        {
            _filteredTransactions = _filteredTransactions.Where(t =>
                t.Description.Contains(titleSearch, StringComparison.OrdinalIgnoreCase));
        }

        // Filter by tag search if provided
        if (!string.IsNullOrEmpty(tagFilter))
        {
            _filteredTransactions = _filteredTransactions.Where(t =>
                t.Tags.Contains(tagFilter, StringComparison.OrdinalIgnoreCase));
        }

        StateHasChanged();
    }

    private async Task OnTitleSearchChanged()
    {
        await UpdateFilteredTransactions();
    }

    private async Task OnDateRangeChanged()
    {
        await UpdateFilteredTransactions();
        await CalculateTotals();
    }

    private async Task OnFiltersChanged()
    {
        await UpdateFilteredTransactions();
    }


    private async Task CalculateTotals()
    {
        totalIncome = await transactionService.CalculateTotal("Income");
        totalExpense = await transactionService.CalculateTotal("Expense");
        remainingDebt = await debtService.GetRemainingDebtAsync();
        originalDebt = await debtService.GetTotalDebtAsync();
        clearedDebt = await debtService.GetTotalPaidDebtAsync();
        availableBalance = await transactionService.CalculateAvailableBalance();
    }

    private double[] chartData => new[] {
        Convert.ToDouble(totalIncome),
        Convert.ToDouble(totalExpense),
        Convert.ToDouble(remainingDebt)
    };

    private string[] chartLabels => new[] {
        $"Available Funds ({authStateService.GetUserCurrency()}{totalIncome})",
        $"Total Outflow ({authStateService.GetUserCurrency()}{totalExpense})",
        $"Remaining Debt ({authStateService.GetUserCurrency()}{remainingDebt})"
    };

    private ChartOptions options = new ChartOptions
        {
            ChartPalette = new[] { "#28a745", "#dc3545", "#17a2b8" }
        };


 
}
